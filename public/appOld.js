"use strict";
class Invoice {
    // The above will throw errors in TS when left alone bc they're not initialized. When you use a construtor, this fixes the problem:
    constructor(c, d, a) {
        this.client = c;
        this.details = d;
        this.amount = a;
    }
    // Bespoke method
    format() {
        return `${this.client} owes $${this.amount} for ${this.details}`;
    }
}
const invoiceOne = new Invoice("BitDegree", "Cirriculum Design", 1500);
const invoiceTwo = new Invoice("BitDegree", "Final Project Design", 2000);
let invoices = []; // Setting 'invoices' type to this only allows things generated by the Invoice constructor to be stored
invoices.push(invoiceOne);
invoices.push(invoiceTwo);
// console.log("invoices", invoices);
invoices.forEach((inv) => {
    console.log(inv.client, inv.details, inv.amount, inv.format());
});
const form = document.querySelector(".new-item-form");
console.log(form.children);
const type = document.querySelector("#type");
const tofrom = document.querySelector("#tofrom");
const details = document.querySelector("#details");
const amount = document.querySelector("#amount");
console.log(amount.value);
form.addEventListener("submit", (e) => {
    e.preventDefault();
    console.log(type.value, tofrom.value, details.value, amount.valueAsNumber);
});
// V.2, where we decalre everything within the constructor
class ModernInvoice {
    constructor(client, details, amount) {
        this.client = client;
        this.details = details;
        this.amount = amount;
    }
    format() {
        return `${this.client} owes $${this.amount} for ${this.details}`;
    }
}
